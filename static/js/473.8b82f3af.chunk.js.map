{"version":3,"file":"static/js/473.8b82f3af.chunk.js","mappings":"sIAAA,SAASA,EAAEC,GAAG,IAAIC,EAAEC,EAAEC,EAAE,GAAG,GAAG,iBAAiBH,GAAG,iBAAiBA,EAAEG,GAAGH,OAAO,GAAG,iBAAiBA,EAAE,GAAGI,MAAMC,QAAQL,GAAG,IAAIC,EAAE,EAAEA,EAAED,EAAEM,OAAOL,IAAID,EAAEC,KAAKC,EAAEH,EAAEC,EAAEC,OAAOE,IAAIA,GAAG,KAAKA,GAAGD,QAAQ,IAAID,KAAKD,EAAEA,EAAEC,KAAKE,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAE,C,6CAA0H,MAAnH,WAAgB,IAAI,IAAIH,EAAEC,EAAEC,EAAE,EAAEC,EAAE,GAAGD,EAAEK,UAAUD,SAASN,EAAEO,UAAUL,QAAQD,EAAEF,EAAEC,MAAMG,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAE,E,0BCClW,EAA6B,gCAA7B,EAA0E,gCAA1E,EAAwH,iCAAxH,EAAsK,gCAAtK,EAA0N,uC,kBCqF1N,EAzEoB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACbC,GAAOC,EAAAA,EAAAA,MAAPD,GACAE,GAAgBC,EAAAA,EAAAA,GAAe,SAAD,OAAUH,EAAV,KAAiB,eAA/CE,YAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,cAAY,WAAO,IAAD,QACvBC,EAAuDR,EAAvDQ,YAAaC,EAA0CT,EAA1CS,MAAOC,EAAmCV,EAAnCU,aAAcC,EAAqBX,EAArBW,SAAUC,EAAWZ,EAAXY,OAEpD,OACE,iCACE,mBACEC,UAAWC,EACXC,QAAS,WAAO,IAAD,IACTC,EAAQ,oBAAGd,EAASe,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACvCd,EAASY,EACV,EALH,sBASA,qBAASH,UAAWC,EAApB,WACE,0BACE,gBACEK,IAAI,GACJC,IACEZ,GAAW,UACRX,EAAQwB,UADA,OACWxB,EAAQyB,YAAY,IAD/B,OACoCd,QAIrD,iBAAKK,UAAWC,EAAhB,WACE,wBAAKL,KACL,eAAGI,UAAWC,EAAd,0BAC+B,GAAfJ,GAAmBa,UADnC,QAGA,sCACA,6BAAKZ,MACL,oCACA,uBACGa,QAAQZ,IACPA,EACGa,KAAI,YACH,OADiB,EAAXC,IAEP,IACAC,KAAK,cAIhB,gCACE,oDACA,2BACE,SAAC,KAAD,CAAMC,GAAG,OAAOX,MAAO,CAAEC,KAAI,oBAAEhB,EAASe,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,KAAvD,UACE,eAAIL,UAAWgB,EAAKf,EAAgBA,GAApC,UACE,qCAGJ,SAAC,KAAD,CAAMc,GAAG,UAAUX,MAAO,CAAEC,KAAI,oBAAEhB,EAASe,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,KAA1D,UACE,eAAIL,UAAWgB,EAAKf,EAAgBA,GAApC,UACE,8CAKR,8BACE,SAAC,KAAD,QAIP,GAAE,CAACd,EAAaE,EAAUE,EAAUP,EAAQwB,SAAUxB,EAAQyB,cAE/D,OAAO,8BAA0B,kBAAhBtB,GAA4BM,KAC9C,C","sources":["../node_modules/clsx/dist/clsx.m.js","webpack://goit-react-hw-05-movies/./src/components/FilmDetails/FilmDetails.module.css?7909","components/FilmDetails/FilmDetails.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","// extracted by mini-css-extract-plugin\nexport default {\"backButton\":\"FilmDetails_backButton__-6ixS\",\"underlined\":\"FilmDetails_underlined__ozKvn\",\"accentColor\":\"FilmDetails_accentColor__E7SH3\",\"topDetails\":\"FilmDetails_topDetails__Qn+8C\",\"nearPosterDetails\":\"FilmDetails_nearPosterDetails__D8SOi\"};","import clsx from 'clsx';\nimport {\n  useParams,\n  Link,\n  Outlet,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport useQueryResult from '../../castomHooks/useQueryResult';\nimport css from './FilmDetails.module.css';\n\nimport { useCallback } from 'react';\n\nconst FilmDetails = ({ dataImg }) => {\n  const { id } = useParams();\n  const { queryResult } = useQueryResult(`movie/${id}?`, 'filmDetails');\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const layout = useCallback(() => {\n    const { poster_path, title, vote_average, overview, genres } = queryResult;\n\n    return (\n      <>\n        <button\n          className={css.backButton}\n          onClick={() => {\n            let prevPage = location.state?.from ?? '/';\n            navigate(prevPage);\n          }}\n        >\n          Go back\n        </button>\n        <section className={css.topDetails}>\n          <div>\n            <img\n              alt=\"\"\n              src={\n                poster_path &&\n                `${dataImg.base_url}${dataImg.still_sizes[2]}${poster_path}`\n              }\n            />\n          </div>\n          <div className={css.nearPosterDetails}>\n            <h2>{title}</h2>\n            <p className={css.accentColor}>\n              User score: {(vote_average * 10).toFixed()}%\n            </p>\n            <h3>Overview</h3>\n            <p> {overview}</p>\n            <h3>Genres</h3>\n            <p>\n              {Boolean(genres) &&\n                genres\n                  .map(({ name }) => {\n                    return name;\n                  })\n                  .join(' ')}\n            </p>\n          </div>\n        </section>\n        <section>\n          <h3>Additional information</h3>\n          <ul>\n            <Link to=\"cast\" state={{ from: location.state?.from ?? '/' }}>\n              <li className={clsx(css.underlined, css.accentColor)}>\n                <b>Cast</b>\n              </li>\n            </Link>\n            <Link to=\"reviews\" state={{ from: location.state?.from ?? '/' }}>\n              <li className={clsx(css.underlined, css.accentColor)}>\n                <b>Reviews</b>\n              </li>\n            </Link>\n          </ul>\n        </section>\n        <section>\n          <Outlet />\n        </section>\n      </>\n    );\n  }, [queryResult, location, navigate, dataImg.base_url, dataImg.still_sizes]);\n\n  return <>{typeof queryResult !== 'string' && layout()}</>;\n};\nexport default FilmDetails;\n"],"names":["r","e","t","f","n","Array","isArray","length","arguments","dataImg","id","useParams","queryResult","useQueryResult","location","useLocation","navigate","useNavigate","layout","useCallback","poster_path","title","vote_average","overview","genres","className","css","onClick","prevPage","state","from","alt","src","base_url","still_sizes","toFixed","Boolean","map","name","join","to","clsx"],"sourceRoot":""}